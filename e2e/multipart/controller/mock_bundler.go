//go:build mock
// +build mock

// Code generated by api_gen. DO NOT EDIT.
// generated version: (devel)
package controller

import (
	"net/http"

	types_api_79f7414a "github.com/go-gneralize/api_gen/v2/e2e/multipart/api"
	types__param_83b965b5 "github.com/go-gneralize/api_gen/v2/e2e/multipart/api/_param"
	ctrl_controller_a2f4eb58 "github.com/go-gneralize/api_gen/v2/e2e/multipart/controller/mock/controller"
	ctrl__param_c369b1fc "github.com/go-gneralize/api_gen/v2/e2e/multipart/controller/mock/controller/_param"
	apierror "github.com/go-gneralize/api_gen/v2/e2e/multipart/controller/pkg/apierror"
	props "github.com/go-gneralize/api_gen/v2/e2e/multipart/controller/props"
	echo "github.com/labstack/echo/v4"
	xerrors "golang.org/x/xerrors"
)

func addRoutes(e *echo.Echo, p *props.ControllerProps, opt *options) {
	add := func(method, path string, handler func(c echo.Context) (interface{}, error)) {
		e.Add(method, path, func(c echo.Context) error {
			var werr *apierror.APIError

			res, err := handler(c)

			if err != nil {
				if !opt.disableErrorHandling && xerrors.As(err, &werr) {
					c.Logger().Errorf("%+v", werr)
					return c.JSON(werr.Status, werr.Body)
				}
				return xerrors.Errorf("%s %s returned an error: %w", method, path, err)
			}
			if res == nil {
				return nil
			}

			return c.JSON(http.StatusOK, res)
		})
	}

	{
		ctrl := ctrl_controller_a2f4eb58.NewPostAController(p)

		add("POST", "/a", func(c echo.Context) (interface{}, error) {
			req := new(types_api_79f7414a.PostARequest)
			if err := c.Bind(req); err != nil {
				c.Logger().Errorf("failed to bind a request for (/a): %+v", err)
				return nil, c.JSON(http.StatusBadRequest, map[string]interface{}{
					"code":    http.StatusBadRequest,
					"message": "invalid request.",
				})
			}
			if err := c.Validate(req); err != nil && err != echo.ErrValidatorNotRegistered {
				return nil, xerrors.Errorf("the validator returned an error: %w", err)
			}

			res, err := ctrl.PostA(c, req)

			if err != nil {
				return nil, xerrors.Errorf("the handler(PostA) returned an error: %w", err)
			}

			if res == nil {
				return nil, nil
			}

			return res, nil
		})
	}

	{
		ctrl := ctrl__param_c369b1fc.NewPostBController(p)

		add("POST", "/:param/b", func(c echo.Context) (interface{}, error) {
			req := new(types__param_83b965b5.PostBRequest)
			if err := c.Bind(req); err != nil {
				c.Logger().Errorf("failed to bind a request for (/:param/b): %+v", err)
				return nil, c.JSON(http.StatusBadRequest, map[string]interface{}{
					"code":    http.StatusBadRequest,
					"message": "invalid request.",
				})
			}
			if err := c.Validate(req); err != nil && err != echo.ErrValidatorNotRegistered {
				return nil, xerrors.Errorf("the validator returned an error: %w", err)
			}

			res, err := ctrl.PostB(c, req)

			if err != nil {
				return nil, xerrors.Errorf("the handler(PostB) returned an error: %w", err)
			}

			if res == nil {
				return nil, nil
			}

			return res, nil
		})
	}

}
