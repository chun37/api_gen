// THIS FILE IS A GENERATED CODE.
// DO NOT EDIT THIS CODE BY YOUR OWN HANDS
// api_gen version: devel
package client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	_api "root/api"
	_api_service "root/api/service"
	_api_service_static_page "root/api/service/static_page"
	_api_service_user "root/api/service/user"
	_api_service_user2 "root/api/service/user2"
	_api_service_user2__userID "root/api/service/user2/_userID"
	_api_service_user2__userID__JobID "root/api/service/user2/_userID/_JobID"
	_clients_go_classes "root/clients/go/classes"
	_clients_go_classes_service "root/clients/go/classes/service"
	_clients_go_classes_service_static_page "root/clients/go/classes/service/static_page"
	_clients_go_classes_service_user "root/clients/go/classes/service/user"
	_clients_go_classes_service_user2 "root/clients/go/classes/service/user2"
	_clients_go_classes_service_user2__userID "root/clients/go/classes/service/user2/_userID"
	_clients_go_classes_service_user2__userID__JobID "root/clients/go/classes/service/user2/_userID/_JobID"
)

type Group_api_service_static_page struct {
	apiClient *APIClient
}

func newGroup_api_service_static_page(client *APIClient) *Group_api_service_static_page {
	return &Group_api_service_static_page{
		apiClient: client,
	}
}

func (g *Group_api_service_static_page) GetStaticPage(reqPayload *_api_service_static_page.GetStaticPageRequest) (respPayload *_api_service_static_page.GetStaticPageResponse, err error) {
	query, err := encodeQuery(reqPayload)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", g.apiClient.base+"/api/service/static_page/static_page"+"?"+query, nil)
	if err != nil {
		return nil, err
	}

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_api_service_static_page.GetStaticPageResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

type Group_api_service_user struct {
	apiClient *APIClient
}

func newGroup_api_service_user(client *APIClient) *Group_api_service_user {
	return &Group_api_service_user{
		apiClient: client,
	}
}

func (g *Group_api_service_user) Get(reqPayload *_api_service_user.GetRequest) (respPayload *_api_service_user.GetResponse, err error) {
	query, err := encodeQuery(reqPayload)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", g.apiClient.base+"/api/service/user/"+"?"+query, nil)
	if err != nil {
		return nil, err
	}

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_api_service_user.GetResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

func (g *Group_api_service_user) PostUpdateUserName(reqPayload *_api_service_user.PostUpdateUserNameRequest) (respPayload *_api_service_user.PostUpdateUserNameResponse, err error) {
	buf := bytes.NewBuffer(nil)
	if err := json.NewEncoder(buf).Encode(reqPayload); err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", g.apiClient.base+"/api/service/user/update_user_name", buf)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", "application/json")

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_api_service_user.PostUpdateUserNameResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

func (g *Group_api_service_user) PostUpdateUserPassword(reqPayload *_api_service_user.PostUpdateUserPasswordRequest) (respPayload *_api_service_user.PostUpdateUserPasswordResponse, err error) {
	buf := bytes.NewBuffer(nil)
	if err := json.NewEncoder(buf).Encode(reqPayload); err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", g.apiClient.base+"/api/service/user/update_user_password", buf)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", "application/json")

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_api_service_user.PostUpdateUserPasswordResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

type Group_api_service_user2__userID__JobID struct {
	apiClient *APIClient
}

func newGroup_api_service_user2__userID__JobID(client *APIClient) *Group_api_service_user2__userID__JobID {
	return &Group_api_service_user2__userID__JobID{
		apiClient: client,
	}
}

func (g *Group_api_service_user2__userID__JobID) PutJob(reqPayload *_api_service_user2__userID__JobID.PutJobRequest) (respPayload *_api_service_user2__userID__JobID.PutJobResponse, err error) {
	buf := bytes.NewBuffer(nil)
	if err := json.NewEncoder(buf).Encode(reqPayload); err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", g.apiClient.base+"/api/service/user2/"+fmt.Sprint(reqPayload.UserID)+"/"+fmt.Sprint(reqPayload.JobID)+"/job", buf)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", "application/json")

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_api_service_user2__userID__JobID.PutJobResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

type Group_api_service_user2__userID struct {
	JobID     *Group_api_service_user2__userID__JobID
	apiClient *APIClient
}

func newGroup_api_service_user2__userID(client *APIClient) *Group_api_service_user2__userID {
	return &Group_api_service_user2__userID{
		apiClient: client,
		JobID:     newGroup_api_service_user2__userID__JobID(client),
	}
}

func (g *Group_api_service_user2__userID) GetUserJobGet(reqPayload *_api_service_user2__userID.GetUserJobGetRequest) (respPayload *_api_service_user2__userID.GetUserJobGetResponse, err error) {
	query, err := encodeQuery(reqPayload)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", g.apiClient.base+"/api/service/user2/"+fmt.Sprint(reqPayload.UserID)+"/user_job_get"+"?"+query, nil)
	if err != nil {
		return nil, err
	}

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_api_service_user2__userID.GetUserJobGetResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

type Group_api_service_user2 struct {
	UserID    *Group_api_service_user2__userID
	apiClient *APIClient
}

func newGroup_api_service_user2(client *APIClient) *Group_api_service_user2 {
	return &Group_api_service_user2{
		apiClient: client,
		UserID:    newGroup_api_service_user2__userID(client),
	}
}

func (g *Group_api_service_user2) GetUser(reqPayload *_api_service_user2.GetUserRequest) (respPayload *_api_service_user2.GetUserResponse, err error) {
	query, err := encodeQuery(reqPayload)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", g.apiClient.base+"/api/service/user2/"+fmt.Sprint(reqPayload.ID)+""+"?"+query, nil)
	if err != nil {
		return nil, err
	}

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_api_service_user2.GetUserResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

func (g *Group_api_service_user2) PostUpdateUserName(reqPayload *_api_service_user2.PostUpdateUserNameRequest) (respPayload *_api_service_user2.PostUpdateUserNameResponse, err error) {
	buf := bytes.NewBuffer(nil)
	if err := json.NewEncoder(buf).Encode(reqPayload); err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", g.apiClient.base+"/api/service/user2/update_user_name", buf)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", "application/json")

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_api_service_user2.PostUpdateUserNameResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

func (g *Group_api_service_user2) PostUpdateUserPassword(reqPayload *_api_service_user2.PostUpdateUserPasswordRequest) (respPayload *_api_service_user2.PostUpdateUserPasswordResponse, err error) {
	buf := bytes.NewBuffer(nil)
	if err := json.NewEncoder(buf).Encode(reqPayload); err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", g.apiClient.base+"/api/service/user2/update_user_password", buf)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", "application/json")

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_api_service_user2.PostUpdateUserPasswordResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

type Group_api_service struct {
	StaticPage *Group_api_service_static_page
	User       *Group_api_service_user
	User2      *Group_api_service_user2
	apiClient  *APIClient
}

func newGroup_api_service(client *APIClient) *Group_api_service {
	return &Group_api_service{
		apiClient:  client,
		StaticPage: newGroup_api_service_static_page(client),
		User:       newGroup_api_service_user(client),
		User2:      newGroup_api_service_user2(client),
	}
}

func (g *Group_api_service) GetArticle(reqPayload *_api_service.GetArticleRequest) (respPayload *_api_service.GetArticleResponse, err error) {
	query, err := encodeQuery(reqPayload)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", g.apiClient.base+"/api/service/article"+"?"+query, nil)
	if err != nil {
		return nil, err
	}

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_api_service.GetArticleResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

type Group_api struct {
	Service   *Group_api_service
	apiClient *APIClient
}

func newGroup_api(client *APIClient) *Group_api {
	return &Group_api{
		apiClient: client,
		Service:   newGroup_api_service(client),
	}
}

func (g *Group_api) Get(reqPayload *_api.GetRequest) (respPayload *_api.GetResponse, err error) {
	query, err := encodeQuery(reqPayload)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", g.apiClient.base+"/api/"+"?"+query, nil)
	if err != nil {
		return nil, err
	}

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_api.GetResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

func (g *Group_api) PostCreateTable(reqPayload *_api.PostCreateTableRequest) (respPayload *_api.PostCreateTableResponse, err error) {
	buf := bytes.NewBuffer(nil)
	if err := json.NewEncoder(buf).Encode(reqPayload); err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", g.apiClient.base+"/api/create_table", buf)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", "application/json")

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_api.PostCreateTableResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

func (g *Group_api) PostCreateUser(reqPayload *_api.PostCreateUserRequest) (respPayload *_api.PostCreateUserResponse, err error) {
	buf := bytes.NewBuffer(nil)
	if err := json.NewEncoder(buf).Encode(reqPayload); err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", g.apiClient.base+"/api/create_user", buf)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", "application/json")

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_api.PostCreateUserResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

type Group_clients_go_classes_service_static_page struct {
	apiClient *APIClient
}

func newGroup_clients_go_classes_service_static_page(client *APIClient) *Group_clients_go_classes_service_static_page {
	return &Group_clients_go_classes_service_static_page{
		apiClient: client,
	}
}

func (g *Group_clients_go_classes_service_static_page) GetStaticPage(reqPayload *_clients_go_classes_service_static_page.GetStaticPageRequest) (respPayload *_clients_go_classes_service_static_page.GetStaticPageResponse, err error) {
	query, err := encodeQuery(reqPayload)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", g.apiClient.base+"/clients/go/classes/service/static_page/static_page"+"?"+query, nil)
	if err != nil {
		return nil, err
	}

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_clients_go_classes_service_static_page.GetStaticPageResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

type Group_clients_go_classes_service_user struct {
	apiClient *APIClient
}

func newGroup_clients_go_classes_service_user(client *APIClient) *Group_clients_go_classes_service_user {
	return &Group_clients_go_classes_service_user{
		apiClient: client,
	}
}

func (g *Group_clients_go_classes_service_user) PostUpdateUserPassword(reqPayload *_clients_go_classes_service_user.PostUpdateUserPasswordRequest) (respPayload *_clients_go_classes_service_user.PostUpdateUserPasswordResponse, err error) {
	buf := bytes.NewBuffer(nil)
	if err := json.NewEncoder(buf).Encode(reqPayload); err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", g.apiClient.base+"/clients/go/classes/service/user/update_user_password", buf)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", "application/json")

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_clients_go_classes_service_user.PostUpdateUserPasswordResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

type Group_clients_go_classes_service_user2__userID__JobID struct {
	apiClient *APIClient
}

func newGroup_clients_go_classes_service_user2__userID__JobID(client *APIClient) *Group_clients_go_classes_service_user2__userID__JobID {
	return &Group_clients_go_classes_service_user2__userID__JobID{
		apiClient: client,
	}
}

func (g *Group_clients_go_classes_service_user2__userID__JobID) PutJob(reqPayload *_clients_go_classes_service_user2__userID__JobID.PutJobRequest) (respPayload *_clients_go_classes_service_user2__userID__JobID.PutJobResponse, err error) {
	buf := bytes.NewBuffer(nil)
	if err := json.NewEncoder(buf).Encode(reqPayload); err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", g.apiClient.base+"/clients/go/classes/service/user2/"+fmt.Sprint(reqPayload.UserID)+"/"+fmt.Sprint(reqPayload.JobID)+"/job", buf)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", "application/json")

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_clients_go_classes_service_user2__userID__JobID.PutJobResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

type Group_clients_go_classes_service_user2__userID struct {
	JobID     *Group_clients_go_classes_service_user2__userID__JobID
	apiClient *APIClient
}

func newGroup_clients_go_classes_service_user2__userID(client *APIClient) *Group_clients_go_classes_service_user2__userID {
	return &Group_clients_go_classes_service_user2__userID{
		apiClient: client,
		JobID:     newGroup_clients_go_classes_service_user2__userID__JobID(client),
	}
}

func (g *Group_clients_go_classes_service_user2__userID) GetUserJobGet(reqPayload *_clients_go_classes_service_user2__userID.GetUserJobGetRequest) (respPayload *_clients_go_classes_service_user2__userID.GetUserJobGetResponse, err error) {
	query, err := encodeQuery(reqPayload)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", g.apiClient.base+"/clients/go/classes/service/user2/"+fmt.Sprint(reqPayload.UserID)+"/user_job_get"+"?"+query, nil)
	if err != nil {
		return nil, err
	}

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_clients_go_classes_service_user2__userID.GetUserJobGetResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

type Group_clients_go_classes_service_user2 struct {
	UserID    *Group_clients_go_classes_service_user2__userID
	apiClient *APIClient
}

func newGroup_clients_go_classes_service_user2(client *APIClient) *Group_clients_go_classes_service_user2 {
	return &Group_clients_go_classes_service_user2{
		apiClient: client,
		UserID:    newGroup_clients_go_classes_service_user2__userID(client),
	}
}

func (g *Group_clients_go_classes_service_user2) PostUpdateUserPassword(reqPayload *_clients_go_classes_service_user2.PostUpdateUserPasswordRequest) (respPayload *_clients_go_classes_service_user2.PostUpdateUserPasswordResponse, err error) {
	buf := bytes.NewBuffer(nil)
	if err := json.NewEncoder(buf).Encode(reqPayload); err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", g.apiClient.base+"/clients/go/classes/service/user2/update_user_password", buf)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", "application/json")

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_clients_go_classes_service_user2.PostUpdateUserPasswordResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

type Group_clients_go_classes_service struct {
	StaticPage *Group_clients_go_classes_service_static_page
	User       *Group_clients_go_classes_service_user
	User2      *Group_clients_go_classes_service_user2
	apiClient  *APIClient
}

func newGroup_clients_go_classes_service(client *APIClient) *Group_clients_go_classes_service {
	return &Group_clients_go_classes_service{
		apiClient:  client,
		StaticPage: newGroup_clients_go_classes_service_static_page(client),
		User:       newGroup_clients_go_classes_service_user(client),
		User2:      newGroup_clients_go_classes_service_user2(client),
	}
}

func (g *Group_clients_go_classes_service) GetArticle(reqPayload *_clients_go_classes_service.GetArticleRequest) (respPayload *_clients_go_classes_service.GetArticleResponse, err error) {
	query, err := encodeQuery(reqPayload)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", g.apiClient.base+"/clients/go/classes/service/article"+"?"+query, nil)
	if err != nil {
		return nil, err
	}

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_clients_go_classes_service.GetArticleResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

type Group_clients_go_classes struct {
	Service   *Group_clients_go_classes_service
	apiClient *APIClient
}

func newGroup_clients_go_classes(client *APIClient) *Group_clients_go_classes {
	return &Group_clients_go_classes{
		apiClient: client,
		Service:   newGroup_clients_go_classes_service(client),
	}
}

func (g *Group_clients_go_classes) PostCreateUser(reqPayload *_clients_go_classes.PostCreateUserRequest) (respPayload *_clients_go_classes.PostCreateUserResponse, err error) {
	buf := bytes.NewBuffer(nil)
	if err := json.NewEncoder(buf).Encode(reqPayload); err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", g.apiClient.base+"/clients/go/classes/create_user", buf)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", "application/json")

	resp, err := g.apiClient.client.Do(req)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	respPayload = &_clients_go_classes.PostCreateUserResponse{}
	if err := json.NewDecoder(resp.Body).Decode(respPayload); err != nil {
		return nil, err
	}

	return respPayload, nil
}

type Group_clients_go struct {
	Classes   *Group_clients_go_classes
	apiClient *APIClient
}

func newGroup_clients_go(client *APIClient) *Group_clients_go {
	return &Group_clients_go{
		apiClient: client,
		Classes:   newGroup_clients_go_classes(client),
	}
}

type Group_clients struct {
	Go        *Group_clients_go
	apiClient *APIClient
}

func newGroup_clients(client *APIClient) *Group_clients {
	return &Group_clients{
		apiClient: client,
		Go:        newGroup_clients_go(client),
	}
}

type Group struct {
	Api       *Group_api
	Clients   *Group_clients
	apiClient *APIClient
}

func newGroup(client *APIClient) *Group {
	return &Group{
		apiClient: client,
		Api:       newGroup_api(client),
		Clients:   newGroup_clients(client),
	}
}

func encodeQuery(v interface{}) (string, error) {
	buf := bytes.NewBuffer(nil)

	if err := json.NewEncoder(buf).Encode(v); err != nil {
		return "", err
	}

	dict := map[string]interface{}{}
	if err := json.NewDecoder(buf).Decode(&dict); err != nil {
		return "", err
	}

	val := url.Values{}
	for k, v := range dict {
		val.Set(k, fmt.Sprint(v))
	}

	return val.Encode(), nil
}

type APIClient struct {
	*Group

	client http.Client
	base   string
}

func NewClient(client http.Client, base string) *APIClient {
	c := &APIClient{
		client: client,
		base:   base,
	}
	if c.base[len(c.base)-1] == '/' {
		c.base = c.base[:len(c.base)-1]
	}

	c.Group = newGroup(c)

	return c
}
