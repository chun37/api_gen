{{- if .Mock }}
// +build mock
{{- else }}
// +build !mock
{{- end }}

// Code generated by api_gen. DO NOT EDIT.
// generated version: {{ .AppVersion }}
package {{ .Package }}

import (
    "net/http"

{{ range $idx, $elem := .Imports }}
	{{$elem.Alias}} "{{$elem.Path}}"
{{- end}}
)

func addRoutes(e *echo.Echo, p *props.ControllerProps) {
    add := func(method, path string, handler func(c echo.Context) (interface{}, error)) {
        e.Add(method, path, func(c echo.Context) error {
            var werr *apierror.APIError

            res, err := handler(c)

            if err != nil {
                if xerrors.As(err, &werr) {
                    c.Logger().Errorf("%+v", werr)
                    return c.JSON(werr.Status, werr.Body)
                }
                return err
            }
            if res == nil {
                return nil
            }

            return c.JSON(http.StatusOK, res)
        })
    }

{{ range $idx, $elem := .Endpoints }}
    {
        ctrl := {{ $elem.ControllerImportAlias }}.{{ $elem.ControllerInitializer }}(p)

        add("{{ $elem.Method }}", "{{ $elem.Path }}", func(c echo.Context) (interface{}, error) {
            req := new({{ $elem.TypesImportAlias }}.{{ $elem.RequestStructName }})
			if err := c.Bind(req); err != nil {
				c.Logger().Errorf("failed to bind a request for ({{ $elem.Path }}): %+v", err)
				return nil, c.JSON(http.StatusBadRequest, map[string]interface{}{
					"code":    http.StatusBadRequest,
					"message": "invalid request.",
				})
			}
			if err := c.Validate(req); err != nil && err != echo.ErrValidatorNotRegistered {
				return nil, err
			}

            res, err := ctrl.{{ $elem.HandlerName }}(c, req)

            if err != nil {
                return nil, xerrors.Errorf("{{ $elem.HandlerName }} returned an error: %w", err)
            }

            if res == nil {
                return nil, nil
            }

            return res, nil
        })
    }
{{ end }}
}
